分享几种常用的设计模式:

1.design-pattern-single 单例模式
说明：单例模式是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。

2.design-pattern-strategy 策略模式
说明：策略模式是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。

3.design-pattern-proxy 代理模式  （静态代理 、动态代理）
说明：代理模式是一种结构型设计模式， 让你能够提供对象的替代品或其占位符。 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理（可以联想切面）。

4.design-pattern-observer 观察者模式 
说明：观察者模式是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象（又叫源-监听器模式）。

5.design-pattern-decorator 装饰者模式 
说明：装饰模式是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。

6.design-pattern-adapter  适配器模式
说明：适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。

7.design-pattern-command  命令模式
将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化；对请求排队或记录日志，以及支持可撤销的操作
将“发出请求的对象”和”接收与执行这些请求的对象”分隔开来。

8.design-pattern-composite  组合模式
将对象组合成树形结构以表示“部分整体”的层次结构。组合模式使得用户对单个对象和复杂对象的使用具有一致性。
